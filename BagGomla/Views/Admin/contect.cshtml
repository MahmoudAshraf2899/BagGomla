@model IdentityLibrary.DataModel.FWYContect
@{
    ViewBag.Title = "صفحة التواصل";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<br /><br />
<div class="row" dir="rtl">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">تعديل معلومات التواصل</h3>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("contect", "Admin", FormMethod.Post, new { }))
            {
                    @Html.HiddenFor(c => c.ID);

                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group row">
                        <label for="Address" class="control-label col-md-2">العنوان</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="dis-none field-validation-error text-danger" data-valmsg-for="Address" data-valmsg-replace="true" id="msgAddress"></span>
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Phone" class="control-label col-md-2">الموبيل</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="dis-none field-validation-error text-danger" data-valmsg-for="Phone" data-valmsg-replace="true" id="msgPhone"></span>
                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Email" class="control-label col-md-2">الايميل </label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="dis-none field-validation-error text-danger" data-valmsg-for="Email" data-valmsg-replace="true" id="msgEmail"></span>
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Password" class="control-label col-md-2">الرقم السرى </label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "Password" } })
                            <span class="dis-none field-validation-error text-danger" data-valmsg-for="Password" data-valmsg-replace="true" id="msgPassword"></span>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Password" class="control-label col-md-2"> فيس بوك </label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Facebook, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Facebook, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Password" class="control-label col-md-2"> انستجرام </label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Instagram, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Instagram, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="Password" class="control-label col-md-2"> لينكدان </label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Linkedin, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Linkedin, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="card-header">
                            <input type="button" id="btnSubmit" value="حفظ" class="btn btn-success text-center" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/js/jquery-1-11-0-min.js"></script>
<script>
    $("#btnSubmit").click(function () {
        var Password = $("#Password").val(),
            Email = $("#Email").val(),
            Address = $("#Address").val(),
            PhoneNumber = $("#Phone").val();
        var ValidEmail = ValidateEmail(Email);
        var ValidPass = ValidatePassword(Password);

        if (ValidEmail == 1 && ValidPass == 1 && Address != "" && Address != null
            && PhoneNumber != "" && PhoneNumber != null && PhoneNumber.length == 11) {
            document.getElementById("btnSubmit").setAttribute("type", "submit");
        }
        else {
            if (Address == "" || Address == null) {
                $("#msgAddress").removeClass("dis-none");
                $("#msgAddress").html("العنوان مطلوب ادخاله");
            }
            else {
                $("#msgAddress").html("");
            }
            //
            if (PhoneNumber == "" || PhoneNumber == null) {
                $("#msgPhone").removeClass("dis-none");
                $("#msgPhone").html("رقم الهاتف مطلوب ادخاله");
            }
            else {
                if (PhoneNumber.length < 11 || PhoneNumber.length > 11) {
                    $("#msgPhone").removeClass("dis-none");
                    $("#msgPhone").html("رقم الهاتف يجب ان يتكون من 11 رقم");
                }
                else {
                    $("#msgPhone").html("");
                }
            }
            //
            if (ValidEmail == -1) {
                $("#msgEmail").removeClass("dis-none");
                $("#msgEmail").html("عنوان البريد غير صالح");
            }
            else if (ValidEmail == 0) {
                $("#msgEmail").removeClass("dis-none");
                $("#msgEmail").html("عنوان البريد مطلوب اخاله");
            }
            else {
                $("#msgEmail").html("");
            }
            //
            if (ValidPass == -1) {
                $("#msgPassword").removeClass("dis-none");
                $("#msgPassword").html("كلمة السر مطلوب ادخالها");
            }
            else if (ValidPass == 0) {
                $("#msgPassword").removeClass("dis-none");
                $("#msgPassword").html("كلمة السر غير صالحة");
            }
            else {
                $("#msgPassword").html("");
                $("#msgConfirmPassword").html("");
            }
        }
    });

    function ValidateEmail(email) {
        //alert(email);
        if (email != "" && email != null) {
            const re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            var x = re.test(String(email).toLowerCase());
            if (x == false) {
                return -1;
            }
            else {
                return 1;
            }
        }
        else {
            return 0;
        }

    }


    function ValidatePassword(password) {

        var lowerCaseLetters = /[a-z]/g;
        var validpass = 0;
        // Validate small letters
        if (password.match(lowerCaseLetters)) {
            validpass = validpass + 1;
        }

        // Validate capital letters
        var upperCaseLetters = /[A-Z]/g;
        if (password.match(upperCaseLetters)) {
            validpass = validpass + 1;
        }

        // Validate numbers
        var numbers = /[0-9]/g;
        if (password.match(numbers)) {
            validpass = validpass + 1;
        }

        // Validate length
        if (password.length >= 8) {
            validpass = validpass + 1;
        }


        if (password == null || password == "") {
            //pass required
            return -1;
        }
        else {
            if (validpass < 4) {
                //not valid
                return 0;
            }
            else {
                return 1;
            }
        }
    }

</script>